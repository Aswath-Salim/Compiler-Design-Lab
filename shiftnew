#include <stdio.h>
#include <string.h>

int k = 0, z = 0, i = 0, j = 0, c = 0;
char a[20],b[20],ac[20], stk[20], act[10];

void check();

int main()
{
    puts("Grammar:");
    puts("S -> T L");
    puts("T -> int | float");
    puts("L -> L , id | id");

    printf("\nEnter input string (e.g., int id,id): ");
    scanf("%[^\n]%*c", b); // read full line including spaces


    strcpy(act, "SHIFT->");
 int l = strlen(b);
    while (l>=0) {
        if (b[i] != ' ') {
            a[j++] = b[i];
        }
        i++;
    l--;}
    a[j] = '\0'; 

printf("%s",a);
i=0,j=0;
    c = strlen(a);
    puts("\nStack\t\tInput\t\tAction");

    for (k = 0, i = 0; j < c; k++, i++, j++)
    {
        // Skip spaces
        if (a[j] == ' ')
            continue;

        // Handle "int"
        if (a[j] == 'i' && a[j + 1] == 'n' && a[j + 2] == 't')
        {
            stk[i] = 'i'; stk[i+1] = 'n'; stk[i+2] = 't'; stk[i+3] = '\0';
            a[j] = a[j+1] = a[j+2] = ' ';
            printf("\n$%s\t\t%s$\t%sint", stk, a, act);
            check();
            j += 2; // move past 'int'
        }
        // Handle "float"
        else if (a[j] == 'f' && a[j+1] == 'l' && a[j+2] == 'o' && a[j+3] == 'a' && a[j+4] == 't')
        {
            stk[i] = 'f'; stk[i+1] = 'l'; stk[i+2] = 'o';
            stk[i+3] = 'a'; stk[i+4] = 't'; stk[i+5] = '\0';
            a[j] = a[j+1] = a[j+2] = a[j+3] = a[j+4] = ' ';
            printf("\n$%s\t\t%s$\t%sfloat", stk, a, act);
            check();
            j += 4; // move past 'float'
        }
        // Handle "id"
        else if (a[j] == 'i' && a[j + 1] == 'd')
        {
            stk[i] = 'i'; stk[i + 1] = 'd'; stk[i + 2] = '\0';
            a[j] = a[j + 1] = ' ';
            printf("\n$%s\t\t%s$\t%sid", stk, a, act);
            check();
            j++;
        }
        // Handle symbols like ',' 
        else
        {
            stk[i] = a[j];
            stk[i + 1] = '\0';
            a[j] = ' ';
            printf("\n$%s\t\t%s$\t%ssymbol", stk, a, act);
            check();
        }
    }

    printf("\n");
    return 0;
}

void check()
{
    strcpy(ac, "REDUCE TO");

    // Reduce int -> T
    for (z = 0; z < c; z++)
        if (stk[z] == 'i' && stk[z+1] == 'n' && stk[z+2] == 't')
        {
            stk[z] = 'T';
            stk[z+1] = '\0';
            printf("\n$%s\t\t%s$\t%s T", stk, a, ac);
        }

    // Reduce float -> T
    for (z = 0; z < c; z++)
        if (stk[z] == 'f' && stk[z+1] == 'l' && stk[z+2] == 'o')
        {
            stk[z] = 'T';
            stk[z+1] = '\0';
            printf("\n$%s\t\t%s$\t%s T", stk, a, ac);
        }

    // Reduce id -> L
    for (z = 0; z < c; z++)
        if (stk[z] == 'i' && stk[z+1] == 'd')
        {
            stk[z] = 'L';
            stk[z+1] = '\0';
            printf("\n$%s\t\t%s$\t%s L", stk, a, ac);
        }

    // Reduce L , id -> L
    for (z = 0; z < c; z++)
        if (stk[z] == 'L' && stk[z+1] == ',' && stk[z+2] == 'L')
        {
            stk[z] = 'L';
            stk[z+1] = '\0';
            stk[z+2] = '\0';
            printf("\n$%s\t\t%s$\t%s L", stk, a, ac);
        }

    // Reduce T L -> S
    for (z = 0; z < c; z++)
        if (stk[z] == 'T' && stk[z+1] == 'L')
        {
            stk[z] = 'S';
            stk[z+1] = '\0';
            printf("\n$%s\t\t%s$\t%s S", stk, a, ac);
        }
}
