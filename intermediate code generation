#include <stdio.h>
#include <string.h>
#include <ctype.h>

int tempVar = 1;

void generate_TAC(char *expr) {
    char stack[20][10];
    int top = -1;
    char postfix[50], temp[10];
    int i = 0, j = 0;


    char opstack[20];
    int optop = -1;

    while (expr[i] != '\0') {
        if (expr[i] == ' ')
            i++;
        else if (isalnum(expr[i])) {
            postfix[j++] = expr[i++];
        } else if (expr[i] == '(') {
            opstack[++optop] = expr[i++];
        } else if (expr[i] == ')') {
            while (optop != -1 && opstack[optop] != '(') {
                postfix[j++] = opstack[optop--];
            }
            optop--; // pop '('
            i++;
        } else {
            while (optop != -1 && ((opstack[optop] == '*' || opstack[optop] == '/') ||
                  ((opstack[optop] == '+' || opstack[optop] == '-') &&
                   (expr[i] == '+' || expr[i] == '-'))))
            {
                postfix[j++] = opstack[optop--];
            }
            opstack[++optop] = expr[i++];
        }
    }
    while (optop != -1) {
        postfix[j++] = opstack[optop--];
    }
    postfix[j] = '\0';


    printf("\nPostfix Expression: %s\n", postfix);


    char opArr[20];
    char arg1Arr[20][10];
    char arg2Arr[20][10];
    char resArr[20][10];
    int quadIndex = 0;


    printf("\nThree Address Code (TAC):\n");
    for (i = 0; postfix[i] != '\0'; i++) {
        if (isalnum(postfix[i])) {
            char s[2] = {postfix[i], '\0'};
            strcpy(stack[++top], s);
        } else {
            char op1[10], op2[10];
            strcpy(op2, stack[top--]);
            strcpy(op1, stack[top--]);

            sprintf(temp, "t%d", tempVar++);
            printf("%s = %s %c %s\n", temp, op1, postfix[i], op2);


            opArr[quadIndex] = postfix[i];
            strcpy(arg1Arr[quadIndex], op1);
            strcpy(arg2Arr[quadIndex], op2);
            strcpy(resArr[quadIndex], temp);
            quadIndex++;

            strcpy(stack[++top], temp);
        }
    }
    printf("a = %s\n", stack[top]);


    printf("\nQuadruple Table:\n");
    printf("%-10s %-10s %-10s %-10s\n", "Op", "Arg1", "Arg2", "Result");
    for (i = 0; i < quadIndex; i++) {
        printf("%-10c %-10s %-10s %-10s\n", opArr[i], arg1Arr[i], arg2Arr[i], resArr[i]);
    }
}

int main() {
    char expr[50];

    printf("Enter an expression :\n");
    fgets(expr, sizeof(expr), stdin);
    expr[strcspn(expr, "\n")] = '\0';

    generate_TAC(expr);
    return 0;
}
