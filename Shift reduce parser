#include <stdio.h>
#include <string.h>

int k = 0, z = 0, i = 0, j = 0, c = 0;
char a[16], ac[20], stk[15], act[20];

void check();

int main() {
    puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id");
    puts("Enter input string (without spaces): ");
    scanf("%s", a);
    c = strlen(a);
    strcpy(act, "SHIFT");

    puts("\nStack\t\tInput\t\tAction");

    for (k = 0, i = 0; j < c; k++, i++, j++) {
        if (a[j] == 'i' && a[j + 1] == 'd') {
            stk[i] = a[j];
            stk[i + 1] = a[j + 1];
            stk[i + 2] = '\0';
            a[j] = ' ';
            a[j + 1] = ' ';
            printf("\n$%s\t\t%s$\t%s id", stk, a, act);
            check();
            i++; // because we inserted 2 chars
            j++; // skip next char since it's part of 'id'
        } else {
            stk[i] = a[j];
            stk[i + 1] = '\0';
            a[j] = ' ';
            printf("\n$%s\t\t%s$\t%s symbol", stk, a, act);
            check();
        }
    }

    // Final status check
    if (strcmp(stk, "E") == 0) {
        printf("\n\nParsing successful: Input string is valid according to the grammar.\n");
    } else {
        printf("\n\nParsing failed: Input string is invalid according to the grammar.\n");
    }

    return 0;
}

void check() {
    strcpy(ac, "REDUCE TO E");

    // id → E
    for (z = 0; z < c; z++) {
        if (stk[z] == 'i' && stk[z + 1] == 'd') {
            stk[z] = 'E';
            stk[z + 1] = '\0';
            printf("\n$%s\t\t%s$\t%s", stk, a, ac);
            j++;
        }
    }

    // E+E → E
    for (z = 0; z < c; z++) {
        if (stk[z] == 'E' && stk[z + 1] == '+' && stk[z + 2] == 'E') {
            stk[z] = 'E';
            stk[z + 1] = '\0';
            stk[z + 2] = '\0';
            printf("\n$%s\t\t%s$\t%s", stk, a, ac);
            i -= 2;
        }
    }

    // E*E → E
    for (z = 0; z < c; z++) {
        if (stk[z] == 'E' && stk[z + 1] == '*' && stk[z + 2] == 'E') {
            stk[z] = 'E';
            stk[z + 1] = '\0';
            stk[z + 2] = '\0';
            printf("\n$%s\t\t%s$\t%s", stk, a, ac);
            i -= 2;
        }
    }

    // (E) → E
    for (z = 0; z < c; z++) {
        if (stk[z] == '(' && stk[z + 1] == 'E' && stk[z + 2] == ')') {
            stk[z] = 'E';
            stk[z + 1] = '\0';
            stk[z + 2] = '\0';
            printf("\n$%s\t\t%s$\t%s", stk, a, ac);
            i -= 2;
        }
    }
}
