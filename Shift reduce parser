#include <stdio.h>
#include <string.h>

int i = 0, j = 0, k = 0, z = 0, c = 0;
char a[16], ac[20], stk[15], act[20];

void check();

int main() {
    puts("GRAMMAR is:");
    puts("E → E + T");
    puts("T → T * F");
    puts("F → ( F )");
    puts("F → id");

    puts("Enter input string (no spaces): ");
    scanf("%s", a);

    c = strlen(a);
    strcpy(act, "SHIFT->");

    puts("Stack\t\tInput\t\tAction");

    for (k = 0, i = 0; j < c; k++, i++, j++) {
        if (a[j] == 'i' && a[j + 1] == 'd') {
            stk[i] = a[j];
            stk[i + 1] = a[j + 1];
            stk[i + 2] = '\0';
            a[j] = ' ';
            a[j + 1] = ' ';
            printf("\n$%s\t\t%s$\t%sid", stk, a, act);
            check();
            i++;  // Skip 'd'
        } 
        else if (a[j] == '+' || a[j] == '*' || a[j] == '(' || a[j] == ')') {
            stk[i] = a[j];
            stk[i + 1] = '\0';
            a[j] = ' ';
            printf("\n$%s\t\t%s$\t%ssymbol", stk, a, act);
            check();
        } 
        else if (a[j] != ' ') {
            printf("\nInvalid symbol '%c' found. Parsing Failed!", a[j]);
            return 1;
        }
    }

    if (strcmp(stk, "E") == 0)
        printf("\n\nParsing Successful!");
    else
        printf("\n\nParsing Failed!");

    return 0;
}

void check() {
    strcpy(ac, "REDUCE TO ");

    // F → id
    for (z = 0; z < c; z++) {
        if (stk[z] == 'i' && stk[z + 1] == 'd') {
            stk[z] = 'F';
            stk[z + 1] = '\0';
            printf("\n$%s\t\t%s$\t%sF → id", stk, a, ac);
            j++;  // Skip 'd'
        }
    }

    // F → (F)
    for (z = 0; z < c; z++) {
        if (stk[z] == '(' && stk[z + 1] == 'F' && stk[z + 2] == ')') {
            stk[z] = 'F';
            stk[z + 1] = '\0';
            stk[z + 2] = '\0';
            printf("\n$%s\t\t%s$\t%sF → (F)", stk, a, ac);
        }
    }

    // T → T * F
    for (z = 0; z < c; z++) {
        if (stk[z] == 'T' && stk[z + 1] == '*' && stk[z + 2] == 'F') {
            stk[z] = 'T';
            stk[z + 1] = '\0';
            stk[z + 2] = '\0';
            printf("\n$%s\t\t%s$\t%sT → T*F", stk, a, ac);
        }
    }

    // T → F
    for (z = 0; z < c; z++) {
        if (stk[z] == 'F' && (stk[z + 1] == '\0' || stk[z + 1] == '+' || stk[z + 1] == '*' || stk[z + 1] == ')')) {
            stk[z] = 'T';
            stk[z + 1] = '\0';
            printf("\n$%s\t\t%s$\t%sT → F", stk, a, ac);
        }
    }

    // E → E + T
    for (z = 0; z < c; z++) {
        if (stk[z] == 'E' && stk[z + 1] == '+' && stk[z + 2] == 'T') {
            stk[z] = 'E';
            stk[z + 1] = '\0';
            stk[z + 2] = '\0';
            printf("\n$%s\t\t%s$\t%sE → E+T", stk, a, ac);
        }
    }

    // E → T
    for (z = 0; z < c; z++) {
        if (stk[z] == 'T' && (stk[z + 1] == '\0' || stk[z + 1] == '+' || stk[z + 1] == ')')) {
            stk[z] = 'E';
            stk[z + 1] = '\0';
            printf("\n$%s\t\t%s$\t%sE → T", stk, a, ac);
        }
    }
}
